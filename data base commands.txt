mongosh 
show dbs
use navtacc
db.createCollections("students")
show dbs
show collection
db.students.renameCollection("faculty")



db.faculty.insertOne({std_name:"Aiaman",age:20,Qualification:"bscs"})
db.faculty.insertOne({std_name:"Abdullah",age:18,Qualification:"CSS",Skills:["html","CSS","JAVA SCRIPT"]})
db.faculty.find()
//////////////////////many///////////////////
db.faculty.insertMany([{std_name:"Ali",age:20,Qualification:"intermediate"},([{std_name:"shahzaib",Age:23,Qualification:"Masters"}])

///////////////////////////////////////////////////////////////////////////////
db.facultydata.insertMany([
  { std_name: "Ali", age: 20, Qualification: "intermediate" },
  { std_name: "shahzaib", age: 23, Qualification: "Masters" }
])
//////////////////////////////////agar filter kar ka pahla document chaiye to /////
db.faculty.findOne()
/////////////////////agar filter kar ka specific document chaiye to //////////////////
db.faculty.findOne({ std_name: "Ali" })

////////////SCHEMA VALIDATION//////////////////

db.createCollection("staff", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      title: "Student data validation",
      required: ["name", "age", "course"],
      properties: {
        name: {
          bsonType: "string",
          description: "name must be in string type"
        },
        age: {
          bsonType: "int",
          minimum: 5,
          maximum: 25,
          description: "age must be an integer in the given limit"
        },
        course: {
          bsonType: "string",
          enum: ["BSCS", "BSIT", "BSSE"],
          description: "course must be one of: bscs, bsit, bsse"
        }
      }
    }
  }
})
})
//////////////////ya sirf collections dekhan ka liya ha /////////////
db.getCollectionInfos()



